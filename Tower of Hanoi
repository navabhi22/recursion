

Google Tower of Hanoi.

Using a helper stick (peg), shift all rings from peg A to peg B using peg C. All rings are initally placed in ascending order, smallest being on top.

No bigger ring can be placed over a smaller ring.

a. Write a recursive function which prints the steps required to solve the tower of Hanoi problem for N discs.

b. Write a recursive function which returns number of steps required to solve the tower of Hanoi problem for N discs.

Let T1 be the Source Tower, T2 be the Destination Tower and T3 be the Auxillary Tower.
Input Format

Enter the number of discs
Constraints

None
Output Format

Display the steps required to solve the tower and also print the total number of steps required
Sample Input

2

Sample Output

Move 1th disc from T1 to T3
Move 2th disc from T1 to T2
Move 1th disc from T3 to T2
3

import java.util.*;
public class Main {
    public static void main(String args[]) {
        // Your Code Here
        Scanner scn = new Scanner(System.in);
        int n =scn.nextInt();
        int k = solve(n,"T1","T3","T2");
        System.out.println(k-1);

    }
    public static int solve(int n,String src, String help, String dest){
        if(n==0) return 1;
        int sp1=solve(n-1,src,dest,help);
        System.out.println("Move "+n+"th disc from "+ src+" to "+ dest);
        int sp2=solve(n-1,help,src,dest);
        return sp1+sp2;
    }
}
