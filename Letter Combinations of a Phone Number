17. Letter Combinations of a Phone Number
Medium
14.3K
820
Companies

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

Example 2:

Input: digits = ""
Output: []

Example 3:

Input: digits = "2"
Output: ["a","b","c"]

 

Constraints:

    0 <= digits.length <= 4
    digits[i] is a digit in the range ['2', '9'].


class Solution {
    public List<String> letterCombinations(String digits) {
        char[][] phone = {{'a','b','c'},{'d','e','f'},{'g','h','i'},{'j','k','l'},{'m','n','o'},{'p','q','r','s'},{'t','u','v'},{'w','x','y','z'}};
        ArrayList<String> list = new ArrayList<String>();
        if(digits.length()==0) return list;
        letterComb(digits,phone,"",list);
        return list;
    }
    public static void letterComb(String str, char[][] phone,String path,ArrayList<String> list ){
        if(str.length()==0){
            list.add(path);
            return;
        }
        char ch =str.charAt(0);
        int num = (int)(ch -'0');
        String s = str.substring(1);
        for(int i=0;i<phone[num-2].length;i++){
            letterComb(s,phone,path+phone[num-2][i],list);
        }
    }
}
